rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /locations/{locationId} {

      function isValidLocationUpdate() {
        let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
        return !affectedKeys.hasAny(['createdAt', 'userId']);
      }

      allow create: if false;

      allow update: if get(/databases/$(database)/documents/locations/$(locationId)).data.userId == request.auth.uid
                    && isValidLocationUpdate();

      allow delete: if false;

      allow read: if request.auth != null;

      match /private/privateData {
        allow read: if get(/databases/$(database)/documents/locations/$(locationId)).data.userId == request.auth.uid;
        allow update: if false;
        allow delete: if false;
        allow create: if false;
      }
    }
    match /users/{userId} {

      function isValidCustomerUpdate() {
        let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
        let isCustomer = resource.data.userType == "customer";

        return isCustomer
          ? affectedKeys.hasOnly(['interests'])
          : true;
      }

      function isValidPromoterUpdate() {
        let isPromoter = resource.data.userType == "promoter";
        let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
        
        return isPromoter
          ? affectedKeys.hasOnly(['description', 'interests'])
          : true;
      }

    	allow create: if false;
              
    	allow update: if request.auth.uid == userId
                    && isValidCustomerUpdate()
                    && isValidPromoterUpdate();
    
      allow read: if request.auth != null;

      allow delete: if false;

      match /private/privateData {

        function isValidCustomerUpdate() {
          let isCustomer = resource.data.userType == "customer";
          let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
          
          return isCustomer
            ? affectedKeys.hasOnly(['isProfileCompleted'])
            : true;
        }

        function isValidPromoterUpdate() {
          let isPromoter = resource.data.userType == "promoter";
          let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
          
          return isPromoter
            ? affectedKeys.hasOnly(['noLocations'])
            : true;
        }

        allow update: if request.auth.uid == userId 
                      && isValidCustomerUpdate()
                      && isValidPromoterUpdate();

        allow read: if request.auth.uid == userId;

        allow delete: if false;

        allow create: if false;
      }
    }
    
    match /usernames/{username} {
    	allow create: if false;
                    
    	allow delete: if get(/databases/$(database)/documents/usernames/$(username)).data.userId == request.auth.uid;
      
      allow read: if request.auth != null;

      allow update: if false;
    }
  }
}